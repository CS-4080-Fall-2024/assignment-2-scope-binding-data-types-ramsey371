Answers
Problem 1:
Parse Tree:

					<Program>
					    |
					<Statement>
				   	    |
					<Assignment>
					/   |   \
				       /    |    \
			    <Identifier>    =    <Expression>
			         |		       |
				 A		     <Term>
						   /   |   \
					          /    |    \
					     <Term>    *    <Factor>
					       |               |
					   <Factor>            |
					       |               |
				         <Identifier>          |
					       |	       |
					       B	  <Expression>
							       |
							     <Term>
							   /   |   \
					                  /    |    \
						     <Term>    *    <Factor>
							|               |
						    <Factor>            |
						        |               |
						  <Identifier>          |
							|		|
							C	  <Expression>
								    /   |   \
					                  	   /    |    \
						     	 <Expression>   +    <Term>
								|               |
						    	      <Term>         <Factor>
						        	|               |
						  	    <Factor>        <Identifier>
								|		|
							  <Identifier>	  	B
								|
								A

Left Most Derivation:

Statement --> Assignment --> Identifier = Expression --> A = Expression --> A = Term -->

A = Term * Factor --> A = Factor * Factor --> A = Identifier * Factor --> A = B * Factor ->

A = B * (Expression) --> A = B * (Term) --> A = B * (Term * Factor) --> 

A = B * (Factor * Factor) --> A = B * (Identifier * Factor) --> A = B * (C * Factor) -->

A = B * (C * (Expression)) --> A = B * (C * (Expression + Term)) --> 			

A = B * (C * (Term + Term)) --> A = B * (C * (Factor + Term)) --> 

A = B * (C * (Identifier + Term)) --> A = B * (C * (A + Term)) -->

A = B * (C * (A + Factor)) --> A = B * (C * (A + Identifier)) --> A = B * (C * (A + B))



Problem 2:

Static Scope:

153 is the output because

Deep Dynamic Scope:

The output would be 180.Deep binding connects function parameters to the variables in the calling environment at runtime. This means that if the values of the variables in the calling environment change after the function is invoked, the values of the parameters can also change.

Shallow Dynamic Scope:

The output would be 101.Shallow binding links function parameters to the variables in the calling environment at the time the function is defined. As a result, if the values of the variables in the calling environment change before the function is executed, the values of the parameters can also change.












